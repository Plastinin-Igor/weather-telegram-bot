package ru.plastinin.weather_telegram_bot.bot;


import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Location;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.plastinin.weather_telegram_bot.exception.ServiceException;
import ru.plastinin.weather_telegram_bot.service.WeatherService;

@Component
@Slf4j
public class WeatherTelegramBot extends TelegramLongPollingBot {

    @Autowired
    WeatherService service;

    private static final String START = "/start";
    private static final String MOSCOW = "/moscow";
    private static final String HELP = "/help";

    private static final Logger LOG = LoggerFactory.getLogger(WeatherTelegramBot.class);

    @Value("${bot.username}")
    private String botUsername;

    public WeatherTelegramBot(@Value("${bot.token}") String botToken) {
        super(botToken);
    }

    @Override
    public void onUpdateReceived(Update update) {

        Long chatId = update.getMessage().getChatId();
        String userName = update.getMessage().getChat().getUserName();

        Message msg = update.getMessage();

        if (msg.hasLocation()) {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
            Location location = msg.getLocation();
            double latitude = location.getLatitude();
            double longitude = location.getLongitude();
            getWeather(chatId, latitude, longitude);
            log.info("Geo Location from username: {}, chatId: {}. Location: lat: {}, long: {}",
                    userName, chatId, latitude, longitude);
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (!update.hasMessage() || !msg.hasText()) {
                return;
            }
            String message = update.getMessage().getText();
            switch (message) {
                case START -> {
                    startCommand(chatId, userName);
                    log.info("START from username: {}, chatId: {}.", userName, chatId);
                }
                case HELP -> {
                    helpCommand(chatId, userName);
                    log.info("HELP from username: {}, chatId: {}.", userName, chatId);
                }
                default -> {
                    sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
                    log.info("The command is not supported. Username: {}, chatId: {}.", userName, chatId);
                }
            }
        }

    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    private void startCommand(Long chatId, String userName) {
        String text = """
                ‚òÅÔ∏è üå¶Ô∏è üåßÔ∏è üåû üå©Ô∏è ‚õÖ ‚ùÑÔ∏è üå°Ô∏è üå´Ô∏è ‚ú®
                @%s, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!
                –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
                
                –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –ì–µ–æ–ø–æ–∑–∏—Ü–∏–∏ (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è üìç ¬´Location¬ª).
                
                –ö–æ–º–∞–Ω–¥—ã:
                –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã üöÄ /start
                –°–ø—Ä–∞–≤–∫–∞ üîç /help
                """;
        String formatedText = String.format(text, userName);
        sendMessage(chatId, formatedText);
    }

    private void helpCommand(Long chatId, String userName) {
        String text = """
                Ô∏è ‚òÅÔ∏è üå¶Ô∏è üåßÔ∏è üåû üå©Ô∏è ‚õÖ ‚ùÑÔ∏è üå°Ô∏è üå´Ô∏è ‚ú®
                –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
                
                –î–æ—Å—Ç—É–ø–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
                
                 - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ üå°Ô∏è ¬∞C
                 - –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ü§î ¬∞C
                 - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ üìâ ¬∞C
                 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ üìàÔ∏è ¬∞C
                 - –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –î–∞–≤–ª–µ–Ω–∏–µ üåê –∫–ü–∞
                 - –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ üíß %
                
                
                –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
                
                üñ•Ô∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ Ô∏è.
                üìé –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–æ–∫ —Å–∫—Ä–µ–ø–∫–∏.
                üìç –ù–∞–π–¥–∏—Ç–µ –ø—É–Ω–∫—Ç "–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è" –∏–ª–∏ "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ".
                ‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.
                üöÄ –ü–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é".
                üìù –í –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –∫—Ä–∞—Ç–∫–∞—è –ø–æ–≥–æ–¥–Ω–∞—è —Å–≤–æ–¥–∫–∞.
                
                –ö–æ–º–∞–Ω–¥—ã:
                –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã üöÄ /start
                –°–ø—Ä–∞–≤–∫–∞ üîç /help
                
                
                –ò—Å—Ç–æ—á–Ω–∏–∫–æ–º –¥–∞–Ω–Ω—ã—Ö —è–≤–ª—è–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å OpenWeatherMap
                
                OpenWeatherMap - –æ–¥–∏–Ω –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö API —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
                –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–µ—Ä–≤–∏—Å–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ üåê https://openweathermap.org/.
                
                """;
        sendMessage(chatId, text);
    }

    private void getWeather(Long chatId, double lat, double lon) {
        try {
            String data = service.getWeather(lat, lon);
            sendMessage(chatId, data);
        } catch (ServiceException e) {
            LOG.error("An error occurred while generating the weather report: {}", e.getMessage());
        }
    }

    private void sendMessage(Long chatId, String text) {
        var chatIdStr = String.valueOf(chatId);
        var sendMessage = new SendMessage(chatIdStr, text);
        sendMessage.setParseMode("HTML");
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            LOG.error("Error sending message", e);
        }
    }

}
