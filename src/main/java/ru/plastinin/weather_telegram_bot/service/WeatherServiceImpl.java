package ru.plastinin.weather_telegram_bot.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ru.plastinin.weather_telegram_bot.client.WeatherClient;
import ru.plastinin.weather_telegram_bot.exception.ServiceException;
import ru.plastinin.weather_telegram_bot.model.WeatherData;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Slf4j
public class WeatherServiceImpl implements WeatherService {

    @Autowired
    private WeatherClient client;

    // private List<WeatherData.Weather> weathers;

    @Override
    public String getWeather(double lat, double lon) throws ServiceException {
        List<WeatherData.Weather> weathers;
        Optional<String> jsonOptional = client.getOpenWeatherMapData(lat, lon);
        String jsonString = jsonOptional.orElseThrow(() -> new ServiceException("Unable to retrieve data " +
                                                                                "from weather service Openweathermap."));
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            WeatherData weatherData = objectMapper.readValue(jsonString, WeatherData.class);

            weathers = List.of(weatherData.getWeather());
            String weatherDescription = getWeatherDescription(weathers);

            String text = """
                    <b>%s: %s</b>
                    
                    üå°<i>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</i>: Ô∏è<b>%s ¬∞C</b>
                    ü§î<i>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫</i>: <b>%s ¬∞C</b>
                    üìâ<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è</i>: <b>%s ¬∞C</b>
                    üìàÔ∏è<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è</i>: <b>%s ¬∞C</b>
                    üåê<i>–ê—Ç–º –î–∞–≤–ª–µ–Ω–∏–µ</i>: <b>%s –º–º —Ä.—Å</b>
                    üíß<i>–í–ª–∞–∂–Ω–æ—Å—Ç—å</i>: <b>%s %%</b>
                    
                    <i>–í–µ—Ç–µ—Ä</i>: <b>%s%s</b>
                    
                    %s
                    
                    <b>–ö–æ–º–∞–Ω–¥—ã:</b>
                    –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã üöÄ /start
                    –°–ø—Ä–∞–≤–∫–∞ üîç /help
                    """;

            return String.format(text,
                    weatherData.getName(),
                    weatherDescription,
                    weatherData.getMain().getTemp(),
                    weatherData.getMain().getFeelsLike(),
                    weatherData.getMain().getTempMin(),
                    weatherData.getMain().getTempMax(),
                    weatherData.getMain().getPressure() / 10 * 7.5, // –∫–ü–∞ -> –º–º —Ä.—Å—Ç.
                    weatherData.getMain().getHumidity(),
                    windDirectionFromDegrees(weatherData.getWind().getDeg()),
                    windDescription(weatherData.getWind().getSpeed()),
                    sunriseSunsetTime(weatherData.getSys().getSunrise(),
                            weatherData.getSys().getSunset(),
                            weatherData.getTimezone()));

        } catch (JsonProcessingException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {}", e.getMessage());
            throw new ServiceException("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.", e);
        }
    }

    private String getWeatherDescription(List<WeatherData.Weather> weathers) {
        return weathers.stream().map(WeatherData.Weather::getDescription)
                .collect(Collectors.joining(" "));
    }

    /**
     * –í—Ä–µ–º—è –í–æ—Å—Ö–æ–¥–∞/–∑–∞–∫–∞—Ç–∞
     */
    private String sunriseSunsetTime(Long sunrise, Long sunset, int timeZoneSeconds) {
        // –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");

        // Time zone
        // –ó–Ω–∞—á–µ–Ω–∏–µ timeZoneSeconds –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
        int hoursOffSet = Math.abs(timeZoneSeconds) / 3600; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∞—Å—ã
        char sign = timeZoneSeconds > 0 ? '+' : '-'; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ —Å–º–µ—â–µ–Ω–∏—è +/-
        String timeZone = "GMT" + sign + hoursOffSet; // –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "GMT+/-h"
        ZoneId zoneId = ZoneId.of(timeZone); // –ü–µ—Ä–µ–≤–µ–¥–µ–º —Å—Ç—Ä–æ–∫—É –≤ ZoneId

        // Timestamp long -> Local date time
        Instant sunriseInstant = Instant.ofEpochSecond(sunrise);
        Instant sunsetInstant = Instant.ofEpochSecond(sunset);

        LocalDateTime sunriseTime = LocalDateTime.ofInstant(sunriseInstant, zoneId);
        LocalDateTime sunsetTime = LocalDateTime.ofInstant(sunsetInstant, zoneId);

        String text = """
                üåÖ <i>–í–æ—Å—Ö–æ–¥ –°–æ–ª–Ω—Ü–∞</i>: %s
                üåÑ <i>–ó–∞—Ö–æ–¥ –°–æ–ª–Ω—Ü–∞</i>: %s
                """;

        return String.format(text, sunriseTime.format(formatter), sunsetTime.format(formatter));
    }

    /**
     * –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞
     * –ò–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    private String windDirectionFromDegrees(int degrees) {
        if (degrees >= 337.5 || degrees <= 22.5) {
            return """
                    ‚¨ÜÔ∏è –°–µ–≤–µ—Ä–Ω—ã–π
                    """;
        } else if (degrees > 22.5 && degrees <= 67.5) {
            return """
                    ‚ÜóÔ∏è –°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π
                    """;
        } else if (degrees > 67.5 && degrees <= 112.5) {
            return """
                    ‚û°Ô∏è –í–æ—Å—Ç–æ—á–Ω—ã–π
                    """;
        } else if (degrees > 112.5 && degrees <= 157.5) {
            return """
                    ‚ÜòÔ∏è –Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π
                    """;
        } else if (degrees > 157.5 && degrees <= 202.5) {
            return """
                    ‚¨áÔ∏è –Æ–∂–Ω—ã–π
                    """;
        } else if (degrees > 202.5 && degrees <= 247.5) {
            return """
                    ‚ÜôÔ∏è –Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–π
                    """;
        } else if (degrees > 247.5 && degrees <= 292.5) {
            return """
                    ‚¨ÖÔ∏è –ó–∞–ø–∞–¥–Ω—ã–π
                    """;
        } else if (degrees > 292.5 && degrees <= 337.5) {
            return """
                    ‚ÜñÔ∏è –°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π
                    """;
        } else return null;
    }


    /**
     * –í–µ—Ç–µ—Ä –ø–æ —à–∫–∞–ª–µ –ë–æ—Ñ–æ—Ä—Ç–∞
     *
     */
    private String windDescription(double speed) {
        String text;

        if (speed <= 0.3) {
            text = """
                    –®—Ç–∏–ª—å (%s –º/—Å) üå¨Ô∏è
                    """;
        } else if (speed > 0.3 && speed <= 1.6) {
            text = """
                    –¢–∏—Ö–∏–π (%s –º/—Å) üå¨Ô∏è
                    """;
        } else if (speed > 1.6 && speed <= 3.4) {
            text = """
                     –õ—ë–≥–∫–∏–π (%s –º/—Å) üå¨Ô∏è
                    """;
        } else if (speed > 3.4 && speed <= 5.5) {
            text = """
                    –°–ª–∞–±—ã–π (%s –º/—Å) üå¨Ô∏è
                    """;
        } else if (speed > 5.5 && speed <= 8.0) {
            text = """
                    –£–º–µ—Ä–µ–Ω–Ω—ã–π (%s –º/—Å) üå¨Ô∏è
                    """;
        } else if (speed > 8.0 && speed <= 10.8) {
            text = """
                    –°–≤–µ–∂–∏–π (%s –º/—Å) üå¨Ô∏è
                    """;
        } else if (speed > 10.8 && speed <= 13.9) {
            text = """
                    –°–∏–ª—å–Ω—ã–π (%s –º/—Å) üí®
                    """;
        } else if (speed > 13.9 && speed <= 17.2) {
            text = """
                    –ö—Ä–µ–ø–∫–∏–π (%s –º/—Å) üí®‚ö°Ô∏è
                    """;
        } else if (speed > 17.2 && speed <= 20.7) {
            text = """
                    –û—á–µ–Ω—å –∫—Ä–µ–ø–∫–∏–π (%s –º/—Å) üí®‚ö°Ô∏è
                    """;
        } else if (speed > 20.7 && speed <= 24.5) {
            text = """
                    –®—Ç–æ—Ä–º (%s –º/—Å) üå©Ô∏è‚ö°Ô∏è
                    """;
        } else if (speed > 24.5 && speed <= 28.5) {
            text = """
                    –°–∏–ª—å–Ω—ã–π —à—Ç–æ—Ä–º (%s –º/—Å) üå©Ô∏è‚ö°Ô∏è
                    """;
        } else if (speed > 28.5 && speed <= 32.7) {
            text = """
                    –ñ–µ—Å—Ç–æ–∫–∏–π —à—Ç–æ—Ä–º (%s –º/—Å) üå™Ô∏è‚ö°Ô∏è
                    """;
        } else if (speed > 32.7) {
            text = """
                    –£—Ä–∞–≥–∞–Ω (%s –º/—Å) üå™Ô∏è‚ö°Ô∏è
                    """;
        } else text = """
                üí® %s –º/—Å
                """;

        return String.format(text, speed);
    }


}
